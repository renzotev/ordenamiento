//Funcion encargada de hacer la validación de números y mostrar mensajes de error
var Validate = (function () {
    //Obtenemos el ID del elemento a validar
    function Validate(id) {
        this.setInput(id);
        Validate.message = "Por favor digite un valor numerico";
    }
    //Iniciamos los eventos
    Validate.prototype.init = function () {
        this.trigger();
    };
    //Creamos al instancia a nuestro elemento a validar
    Validate.prototype.setInput = function (id) {
        this.input = document.getElementById(id);
    };
    //Obtenemos el elemento a validar
    Validate.prototype.getInput = function () {
        return this.input;
    };
    //Validamos que el número sea entero
    Validate.prototype.isInt = function (value) {
        var x;
        if (isNaN(value)) {
            return false;
        }
        x = parseFloat(value);
        return (x | 0) === x;
    };
    //Eventos encargados de valir y mostrar mensajes de error
    Validate.prototype.trigger = function () {
        var _this = this;
        var error = document.querySelector("#" + this.getInput().id + " + .error");
        error.innerHTML = Validate.message;
        this.getInput().parentElement.classList.add("disabled");
        this.getInput().addEventListener('keyup', function (e) {
            var target = e.target;
            var val = target.value;
            target.parentElement.classList.remove("disabled");
            if (_this.isInt(val)) {
                error.classList.remove("error--active");
                target.parentElement.classList.remove("error");
            }
            else if (val.toString() != "") {
                error.classList.add("error--active");
                target.parentElement.classList.add("error");
            }
        }, false);
    };
    return Validate;
}());
// Clase encargada de reordenar nuestro array y el DOM
var Sort = (function () {
    // Obtenemos la clase css de nuestros números
    function Sort(itemSelector) {
        this.items = [];
        this.positions = [];
        this.itemClass = itemSelector;
    }
    //verificamos si existe el elemento que deseamos agregar
    Sort.prototype.isDuplicate = function (n) {
        var result = this.getItems().some(function (item) {
            return item === n;
        });
        return result;
    };
    //Funcion encargada de hacer las llamadas al reordenamiento
    Sort.prototype.asc = function () {
        this.getPositions();
        this._items = this.items.slice();
        this.items = this.mergeSort(this.getItems());
        this.animate();
    };
    //Funcion encargada de animar el reordenamiento
    Sort.prototype.animate = function () {
        var _this = this;
        var elem = document.getElementsByClassName(this.itemClass);
        for (var i = 0; i < elem.length; i++) {
            this.setPosition(i, this.items.indexOf(this._items[i]));
        }
        setTimeout(function () {
            _this.sortDOM();
        }, 700);
    };
    //Callback de la funcion animate() esta funcion se encarga de reordenar el dom despues de la animación
    Sort.prototype.sortDOM = function () {
        var container = document.getElementById("result");
        container.innerHTML = "";
        for (var i = 0; i < this.items.length; i++) {
            var item = document.createElement("div");
            item.classList.add(this.itemClass);
            item.classList.add(this.itemClass + "--added");
            item.innerHTML = this.items[i].toString();
            container.appendChild(item);
        }
    };
    ;
    // Obtenemos los offset de los elementos
    Sort.prototype.getPositions = function () {
        var elem = document.getElementsByClassName(this.itemClass);
        for (var i = 0; i < elem.length; i++) {
            this.positions.push({
                left: elem[i].offsetLeft,
                top: elem[i].offsetTop
            });
        }
    };
    //Se encarga de mover un elemento a una posición especifica
    Sort.prototype.setPosition = function (before, after) {
        var _this = this;
        var elem = document.getElementsByClassName(this.itemClass);
        elem[before].style.position = "absolute";
        elem[before].style.left = this.positions[before].left + "px";
        elem[before].style.top = this.positions[before].top + "px";
        setTimeout(function () {
            elem[before].style.left = _this.positions[after].left + "px";
            elem[before].style.top = _this.positions[after].top + "px";
        }, 100);
    };
    /* Las funciones mergeSort y merge se encargan de reordenar nuestro array
    usando el algoritomo de Ordenamiento por mezcla */
    Sort.prototype.mergeSort = function (arr) {
        var len = arr.length;
        if (len < 2) {
            return arr;
        }
        var mid = Math.floor(len / 2), left = arr.slice(0, mid), right = arr.slice(mid);
        return this.merge(this.mergeSort(left), this.mergeSort(right));
    };
    Sort.prototype.merge = function (left, right) {
        var result = [], lLen = left.length, rLen = right.length, l = 0, r = 0;
        while (l < lLen && r < rLen) {
            if (left[l] < right[r]) {
                result.push(left[l++]);
            }
            else {
                result.push(right[r++]);
            }
        }
        return result.concat(left.slice(l)).concat(right.slice(r));
    };
    //Agregamos un elemento
    Sort.prototype.addItem = function (n) {
        if (!this.isDuplicate(n)) {
            this.items.push(n);
        }
    };
    //Obtenemos el array con todos los elementos
    Sort.prototype.getItems = function () {
        return this.items;
    };
    return Sort;
}());
/// <reference path="./Sort.ts" />
//Clase con la logica principal de nuestra aplicación
var Form = (function () {
    //Obtenemos los selectores necesarios
    function Form(options) {
        this.setForm(options.inputID);
        this.setInput(options.inputID);
        this.setResult(options.resultID);
        this.setItemClass(options.itemClass);
        this.setSortButton(options.sortID);
    }
    //Iniciar nuestros eventos y crear nuestro objeto a reordenar
    Form.prototype.init = function () {
        this.createSort();
        this.trigger();
    };
    // Setters y Getters encargados de las instacias al DOM
    Form.prototype.setForm = function (id) {
        this.form = document.getElementById(id).parentElement;
    };
    Form.prototype.setInput = function (id) {
        this.input = document.getElementById(id);
    };
    Form.prototype.setResult = function (id) {
        this.result = document.getElementById(id);
    };
    Form.prototype.setItemClass = function (cssClass) {
        this.itemClass = cssClass;
    };
    Form.prototype.setSortButton = function (id) {
        this.sortButton = document.getElementById(id);
    };
    Form.prototype.createSort = function () {
        this.sort = new Sort(this.itemClass);
    };
    Form.prototype.getForm = function () {
        return this.form;
    };
    Form.prototype.getResult = function () {
        return this.result;
    };
    Form.prototype.getInput = function () {
        return this.input;
    };
    Form.prototype.getSortButton = function () {
        return this.sortButton;
    };
    //Eventos principales - Submit del formulario y Clic al botón de reordenar
    Form.prototype.trigger = function () {
        var _this = this;
        this.getForm().addEventListener('submit', function (e) {
            var target = e.target;
            var value = parseInt(_this.getInput().value);
            if (!target.classList.contains('error') && !target.classList.contains('disabled')) {
                var item = document.createElement("div");
                item.classList.add(_this.itemClass);
                item.innerHTML = value.toString();
                var waitTime = 100;
                _this.getInput().value = "";
                if (!_this.sort.isDuplicate(value) && !isNaN(value)) {
                    _this.sort.addItem(value);
                    _this.getResult().appendChild(item);
                    // Esperamos que el elemento sea agregado al dom para poder agregar la animación
                    setTimeout(function () {
                        _this.getResult().lastChild.classList.add("square--added");
                    }, waitTime);
                }
            }
            e.preventDefault();
        }, false);
        this.getSortButton().addEventListener('click', function (e) {
            _this.sort.asc();
            e.preventDefault();
        });
    };
    return Form;
}());
/// <reference path="./Validate.ts" />
/// <reference path="./Form.ts" />
var validate = new Validate("input-num");
validate.init();
var sort = new Form({
    inputID: "input-num",
    resultID: "result",
    itemClass: "square",
    sortID: "sort"
});
sort.init();

//# sourceMappingURL=data:application/json;charset=utf8;base64,
